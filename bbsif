#!/usr/bin/env bash

# Path          - /usr/bin/ecofetch
# Author        - The-Repo-Club [wayne6324@gmail.com]
# Github        - https://github.com/The-Repo-Club/ecofetch
# Start on      - Tue 28 Dec 21:26:12 GMT 2021
# Modified on   - Tue 28 Dec 21:26:12 GMT 2021

# The MIT License (MIT)
#
# Copyright (c) 2021 Wayne Wesley
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

## Script metadata
SCRIPTNAME=${0##*/}
DESCRIPTION="Bash Based System Information Fetcher"
AUTHOR="The-Repo-Club <wayne6324@gmail.com>"
VERSION="2021.12.01"

readonly SCRIPTNAME DESCRIPTION AUTHOR VERSION

## Set Colors (copied from makepkg)
b_blk="\e[1;90m"
b_red="\e[1;91m"
b_grn="\e[1;92m"
b_yel="\e[1;93m"
b_blu="\e[1;94m"
b_mag="\e[1;95m"
b_cyn="\e[1;96m"
b_wht="\e[1;97m"
blk="\e[1;30m"
red="\e[1;31m"
grn="\e[1;32m"
yel="\e[1;33m"
blu="\e[1;34m"
mag="\e[1;35m"
cyn="\e[1;36m"
wht="\e[1;37m"
bld="\e[1;1m"
res="\e[1;0m"

readonly b_blk b_red b_grn b_yel b_blu b_mag b_cyn b_wht blk red grn yel blu mag cyn wht bld res

# Speed up script by not using unicode.
LC_ALL=C
LANG=C

# Bfetch default config.
read -rd '' config <<'EOF'
# Hide/Show Fully domain name.
# Default:  'yes'
# Values:   'yes', 'no'
title_on="yes"

# Hide/Show Separator.
# Default:  'yes'
# Values:   'yes', 'no'
sep_on="yes"
EOF

#=== FUNCTION =================================================================
#        Name: repeat
# Description: Repeat given char 80 times using shell function
# Parameter 1: Message to repeat
#==============================================================================
repeat(){
	printf "$1"'%.s' {1..20}
}

#=== FUNCTION =================================================================
#        Name: msg
# Description: Print message with a green pretag if $quiet is not set.
# Parameter 1: Message to print.
#==============================================================================

# copied from makepkg and modified
msg () {

    local mesg=$1; shift
    printf "${grn}==>${res}${bld} %b${res}\n" "$mesg" "$@"
    exit 0
}

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR
# Parameter 1: Message to print
#==============================================================================

# copied from makepkg
error() {
    local mesg=$1; shift
    printf "${red}==> ERROR:${res} %b${res}\n" "$mesg" "$@" >&2

}

#=== FUNCTION =================================================================
#        Name: usage
# Description: Prints the usage
#==============================================================================

usage() {
    printf "
    Run a command using the selected default program

    Usage:
      %b [options]...

    Options:
        -h, --help              Print the help message.
        -v, --version           Print the version infomation.
    \n" "$SCRIPTNAME"
}

#=== FUNCTION =================================================================
#        Name: version
# Description: Prints version information.
#==============================================================================

version() {
    printf "
   ______      ______       _______    _____    _________
  |_   _ \    |_   _ \     /  ___  |  |_   _|  |_   ___  |
    | |_) |     | |_) |   |  (__ \_|    | |      | |_  \_|
    |  __'.     |  __'.    '.___'-.     | |      |  _|
   _| |__) |   _| |__) |  |'\____) |   _| |_    _| |_
  |_______/   |_______/   |_______.'  |_____|  |_____|

    %b - v%b

    This program may be freely redistributed
    under the terms of The MIT License.

    %b
    \n" "$DESCRIPTION" "$VERSION" "$AUTHOR"
    exit
}

#=== FUNCTION =================================================================
#        Name: get_ascii
# Description: Prints ascii_art to main.
#==============================================================================

get_ascii() {
    printf -v ascii_art "%b\n" "\t\t\t\t
${b_wht}╔══════════════════════╦══════════╗
${b_wht}║                      ║ ${b_grn} ${b_wht} ${b_mag} ${b_wht} ${b_yel} ${b_wht} ║
${b_wht}╠══════════════════════╝          ║
${b_wht}║                                 ║
${b_wht}║                                 ║
${b_wht}║           ${b_red}█▀▀▀▀▀▀▀▀█${b_wht}            ║
${b_wht}║           ${b_red}█        █${b_wht}            ║
${b_wht}║           ${b_blk}█ ${b_red} █  █ ${b_blk} █${b_wht}            ║
${b_wht}║           ${b_blk}█        █${b_wht}            ║
${b_wht}║           ${b_blk}▀█▄▄▄▄▄▄█▀${b_wht}            ║
${b_wht}║                                 ║
${b_wht}║                                 ║
${b_wht}║                                 ║
${b_wht}║    ${b_red}sudo rm -rf /* _$     ${b_wht}     ║
${b_wht}║                                 ║
${b_wht}╚═════════════════════════════════╝
\t\t\t\t"
}

#=== FUNCTION =================================================================
#        Name: get_title
# Description: Prints title info to main.
#==============================================================================

get_title() {
    user=${USER:-$(id -un || printf %b "${HOME/*\/}")}
    daynight="$(date +"%r" | awk '{print $2}')"
    hour=$(date +"%l")
    good="Good evening, "

    if [[ $daynight = "AM" ]]; then
        [ "$hour" -ge 5 ] && [ "$hour" -lt 12 ] && good="Good morning, "
    else
        { [ "$hour" -eq 12 ] || [ "$hour" -lt 5 ]; } && good="Good afternoon, "
    fi

    title="${red}${bld}${good}${user}!${res}"
    printf -v title "%b\n" "$title"
}

#=== FUNCTION =================================================================
#        Name: get_sep
# Description: Prints sep info to main.
#==============================================================================

get_sep() {
    sep="${wht}$(repeat "~")${res}"
    printf -v sep "%b\n" "$sep"
}

#=== FUNCTION =================================================================
#        Name: get_hwinfo
# Description: Prints hwinfo info to main.
#==============================================================================

get_hwinfo() {
    hwinfo="${red}╔════════════════ ${grn}Hardware Information ${red}════════════════╗"
    printf -v hwinfo "%b\n" "$hwinfo"
}

#=== FUNCTION =================================================================
#        Name: main
# Description: Prints system information.
#==============================================================================

main() {
    # Load default config.
    eval "$config"

    #get_user_config

    get_ascii
    get_title
    get_sep
    get_hwinfo

    count=0
    while IFS= read -r Line; do
        if [ $count -eq 0 ]; then
            if [ "$title_on" == "yes" ]; then
                printf "%b\t%b" "$Line" "$title"
            else
                printf "%b\t%b" "$Line" "$count"
            fi
        fi
        if [ $count -eq 1 ]; then
            if [ "$sep_on" == "yes" ]; then
                printf "%b\t%b" "$Line" "$sep"
            else
                printf "%b" "$Line"
            fi
        fi
        if [ $count -eq 3 ]; then
            printf "%b\t%b" "$Line" "$hwinfo"
        fi
        if [ $count -eq 4 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 5 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 6 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 7 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 8 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 9 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 10 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 11 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 12 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 13 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 14 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 15 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        if [ $count -eq 16 ]; then
            if [ "$_on" == "yes" ]; then
                printf "%b\t%b\n" "$Line" "$sep"
            else
                printf "%b\n" "$Line"
            fi
        fi
        count=$(( count + 1 ))
    done <<< "$ascii_art"
}

while true; do
	case $1 in
        -h|--help|-\?)
            usage
            exit 0 ;;
		-v|--version)
            version
			exit 0 ;;
		*)
            main "$@"
			exit 0 ;;
	esac
	shift
done

# vim: noai:ts=4:sw=4:expandtab
