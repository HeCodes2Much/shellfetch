#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
# shellcheck disable=2009
# shellcheck disable=SC2034
#
# Path          - /usr/bin/ecofetch
# Author        - The-Repo-Club [wayne6324@gmail.com]
# Github        - https://github.com/The-Repo-Club/ecofetch
# Start on      - Tue 28 Dec 21:26:12 GMT 2021
# Modified on   - Tue 28 Dec 21:26:12 GMT 2021
#
# The MIT License (MIT)
#
# Copyright (c) 2021 Wayne Wesley
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

## Script metadata
SCRIPTNAME=${0##*/}
DESCRIPTION="Bash Based System Information Fetcher"
AUTHOR="The-Repo-Club <wayne6324@gmail.com>"
VERSION="2021.12.01"

readonly SCRIPTNAME DESCRIPTION AUTHOR VERSION

## Set Colors (copied from makepkg)
b_blk="\e[0;90m"
b_red="\e[0;91m"
b_grn="\e[0;92m"
b_yel="\e[0;93m"
b_blu="\e[0;94m"
b_mag="\e[0;95m"
b_cyn="\e[0;96m"
b_wht="\e[0;97m"
blk="\e[0;30m"
red="\e[0;31m"
grn="\e[0;32m"
yel="\e[0;33m"
blu="\e[0;34m"
mag="\e[0;35m"
cyn="\e[0;36m"
wht="\e[0;37m"
bld="\e[1;1m"
del="\e[0;0m"

readonly b_blk b_red b_grn b_yel b_blu b_mag b_cyn b_wht blk red grn yel blu mag cyn wht bld del

#=== STRINMG ==================================================================
#        Name: space
# Description: Give space to main function
#==============================================================================

spaces="\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t"

readonly spaces

#=== DEFAULTS =================================================================
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}

# Speed up script by not using unicode.
setterm -linewrap off
LC_ALL=C
LANG=C

# Display Type: ASCII or Text
display_type="ASCII"

# Plain logo
display_logo="no"

# Verbose Setting - Set to 1 for verbose output.
verbosity=0

# Static variables
display_index=0

# User options
gtk_2line="no"

log_dir="$HOME/.cache/bbsif"

declare -A AArr
#==============================================================================

#=== ARRAY ====================================================================
#        Name: display
# Description: Information to display
#==============================================================================
read -rd '' config <<'EOF'

# Comment out below or deleted the lines for things you dont want displayed!
# You may also change the order of these if you wish too...
display=(
    'title'         # Daytime and name
    'sep'           # Seperator
    'uptime'        # Uptime
    'hwinfo'        # Hardware Information (Header)
    'host'          # Host (PC Model Information)
    'cpu'           # CPU Information
    'gpu'           # GPU Information
    'mem'           # Memory Information
    'res'           # Resolution Information
    'disk'          # Disk Information (All disks installed)
    'pinfo'         # Peripherals Information (Header)
    'keyboard'      # Keyboard Information
    'mouse'         # Mouse Information
    'monitor'       # Monitor Information
    'audio'         # Audio Information
    'swinfo'        # Software Information (Header)
    'distro'        # Distro Information
    'init'          # Init Information
    'kernel'        # Kernel Information
    'pkgs'          # Packages Information
    'shell'         # Shell Information
    'term'          # Terminal Information
    'de'            # Desktop Environment Information
    'wm'            # Window Manager Information
    'wmTheme'       # Window Manager Theme Information
    'gtkTheme'      # GTK Theme Information
    'gtkIcons'      # GTK Icons Information
    'gtkFonts'      # GTK Fonts Information
    'qtTheme'       # QT Theme Information
    'qtIcons'       # QT Icons Information
    'qtFonts'       # QT Fonts Information
    'end'           # End (Header)
    'blank'         # Empty Block
    'blank'         # Empty Block
    'color1'        # Normal Colors
    'color2'        # Bright Colors
)

EOF

#=== FUNCTION =================================================================
#        Name: repeat
# Description: Repeat given char 80 times using shell function
# Parameter 1: Message to repeat
#==============================================================================
repeat() {
    printf "$1"'%.s' {1..20}
}

#=== FUNCTION =================================================================
#        Name: msg
# Description: Print message with a green pretag if $quiet is not set.
# Parameter 1: Message to print.
#==============================================================================

# copied from makepkg and modified
msg () {

    local mesg=$1;
    printf "${grn}${bld}==>${del}${wht} %b${del}\n" "$mesg"
    exit 0
}

#=== FUNCTION =================================================================
#        Name: clean
# Description: Print message with a cleaned up text.
# Parameter 1: Message to print.
#==============================================================================

clean () {

    local mesg=$1;
    mesg=$(echo $mesg | sed 's/\x1b\[[0-9;]*[a-zA-Z]//g')
    printf "%b\n" "$mesg"
}

#=== FUNCTION =================================================================
#        Name: trim
# Description: Print message with a trimed up text.
# Parameter 1: Message to print.
#==============================================================================

trim () {
    set -f
    set -- $*
    printf '%s\n' "${*//[[:space:]]/}"
    set +f
}

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR
# Parameter 1: Message to print
#==============================================================================

# copied from makepkg
error() {
    local mesg=$1;
    printf "${red}${bld}==> ERROR:${wht} %b${del}\n" "$mesg"
    exit 0
}

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR
# Parameter 1: Message to print
#==============================================================================

# copied from makepkg
verbose() {
    if [[ "$verbosity" -eq "1" ]]; then
        local mesg=$1; shift
        printf "${red}${bld}==> VERBOSE:${wht} %b${del}\n" "$mesg" "$@" >&2
    fi
}

#=== FUNCTION =================================================================
#        Name: usage
# Description: Prints the usage
#==============================================================================

usage() {
    printf "
    Run a command using the selected default program

    Usage:
    %b [options]...

    Options:
    -h, --help              Print the help message.
    -v, --version           Print the version infomation.
    -b, --birthday          Set the birthday infomation.
    \n" "$SCRIPTNAME"
}

#=== FUNCTION =================================================================
#        Name: version
# Description: Prints version information.
#==============================================================================

version() {
    printf "
   ______      ______       _______    _____    _________
  |_   _ \    |_   _ \     /  ___  |  |_   _|  |_   ___  |
    | |_) |     | |_) |   |  (__ \_|    | |      | |_  \_|
    |  __'.     |  __'.    '.___'-.     | |      |  _|
   _| |__) |   _| |__) |  |'\____) |   _| |_    _| |_
  |_______/   |_______/   |_______.'  |_____|  |_____|

    %b - v%b

    This program may be freely redistributed
    under the terms of The MIT License.

    %b
    \n" "$DESCRIPTION" "$VERSION" "$AUTHOR"
    exit
}

#=== FUNCTION =================================================================
#        Name: get_ppid
# Description: Prints ppid to function.
#==============================================================================

get_ppid () {
    # Get parent process ID of PID.
    ppid="$(grep -i -F "PPid:" "/proc/${1:-$PPID}/status")"
    ppid="$(clean "${ppid/PPid:}")"
    printf "%s" "$ppid"
}

#=== FUNCTION =================================================================
#        Name: get_process_name
# Description: Prints process_name to function.
#==============================================================================

get_process_name() {
    # Get PID name.
    name="$(< "/proc/${1:-$PPID}/comm")"
    printf "%s" "$name"
}

#=== FUNCTION =================================================================
#        Name: get_user_config
# Description: Prints config to main.
#==============================================================================

get_user_config() {
    if [[ -f "${XDG_CONFIG_HOME}/bbsif/config" ]]; then
        source "${XDG_CONFIG_HOME}/bbsif/config"
        verbose "Config: Sourced user config.    (${XDG_CONFIG_HOME}/bbsif/config)"

    elif [[ -z "$no_config" ]]; then
        config_file="${XDG_CONFIG_HOME}/bbsif/config"

        # The config file doesn't exist, create it.
        mkdir -p "${XDG_CONFIG_HOME}/bbsif/"
        printf '%s\n' "$config" > "$config_file"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_ascii
# Description: Prints ascii_art to main.
#==============================================================================

get_ascii() {
    printf -v ascii_art "%b\n" "\t\t\t\t
    ${b_wht}╔══════════════════════╦══════════╗${del}
    ${b_wht}║                      ║ ${b_grn} ${b_wht} ${b_mag} ${b_wht} ${b_yel} ${b_wht} ║${del}
    ${b_wht}╠══════════════════════╝          ║${del}
    ${b_wht}║                                 ║${del}
    ${b_wht}║                                 ║${del}
    ${b_wht}║           ${b_red}█▀▀▀▀▀▀▀▀█${b_wht}            ║${del}
    ${b_wht}║           ${b_red}█        █${b_wht}            ║${del}
    ${b_wht}║           ${b_blk}█ ${b_red} █  █ ${b_blk} █${b_wht}            ║${del}
    ${b_wht}║           ${b_blk}█        █${b_wht}            ║${del}
    ${b_wht}║           ${b_blk}▀█▄▄▄▄▄▄█▀${b_wht}            ║${del}
    ${b_wht}║                                 ║${del}
    ${b_wht}║                                 ║${del}
    ${b_wht}║                                 ║${del}
    ${b_wht}║    ${b_red}sudo rm -rf /* _$     ${b_wht}     ║${del}
    ${b_wht}║                                 ║${del}
    ${b_wht}╚═════════════════════════════════╝${del}
    ${spaces}
    ${spaces}
    ${spaces}
    ${spaces}
    ${spaces}
    ${spaces}"
}

#=== FUNCTION =================================================================
#        Name: get_user_bday
# Description: Prints user_bday info to title.
#==============================================================================

get_user_bday() {
    # Check user's birthday
    [ -f "$log_dir"/userbday.log ] || { mkdir -p "$log_dir" ; echo "00/00" > "$log_dir"/userbday.log; }
    [ -s "$log_dir"/userbday.log ] || echo "00/00" > "$log_dir"/userbday.log
    date="$(date +"%d/%m")"
    userbday="$(< "$log_dir"/userbday.log)"
    if [ "$date" = "$userbday" ]; then
        printf -v birthday "%b" "Happy Birthday"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_title
# Description: Prints title info to main.
#==============================================================================

get_title() {
    user=${USER:-$(id -un || printf %b "${HOME/*\/}")}
    daynight="$(date +"%r" | awk '{print $2}')"
    hour=$(date +"%l")
    good="Good evening, "

    if [[ $daynight = "AM" ]]; then
        [ "$hour" -ge 5 ] && [ "$hour" -lt 12 ] && good="Good morning, "
    else
        { [ "$hour" -eq 12 ] || [ "$hour" -lt 5 ]; } && good="Good afternoon, "
    fi
    get_user_bday

    [ "$birthday" ] && good="$birthday, "

    printf -v title "%b\n" "${b_red}${bld}${good}${user}!${del}"
}

#=== FUNCTION =================================================================
#        Name: get_sep
# Description: Prints sep info to main.
#==============================================================================

get_sep() {
    printf -v sep "%b" "${b_wht}$(repeat "~")${del}"
}

#=== FUNCTION =================================================================
#        Name: get_uptime
# Description: Prints uptime info to main.
#==============================================================================

get_uptime () {
	unset uptime
	if [[ -r /proc/uptime ]]; then
        s=$(< /proc/uptime)
        s=${s/.*}
    else
        boot=$(date -d"$(uptime -s)" +%s)
        now=$(date +%s)
        s=$((now - boot))
    fi

	d="$((s / 60 / 60 / 24)) days"
    h="$((s / 60 / 60 % 24)) hours"
    m="$((s / 60 % 60)) minutes"
    # Remove plural if < 2.
    ((${d/ *} == 1)) && d=${d/s}
    ((${h/ *} == 1)) && h=${h/s}
    ((${m/ *} == 1)) && m=${m/s}

    # Hide empty fields.
    ((${d/ *} == 0)) && unset d
    ((${h/ *} == 0)) && unset h
    ((${m/ *} == 0)) && unset m

    uptime=${d:+$d, }${h:+$h, }$m
    uptime=${uptime%', '}
    uptime=${uptime:-$s seconds}

	verbose "Finding current uptime...found as '${uptime}'"
    if [ ! -z "$uptime" ]; then
        printf -v uptime "%b %b" "${b_mag}${bld}Uptime » \t" "${del}${b_wht}$uptime${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_hwinfo
# Description: Prints hwinfo info to main.
#==============================================================================

get_hwinfo() {
    printf -v hwinfo "%b" "${b_red}╔════════════════${b_grn} Hardware Information ${b_red}═════════════════╗${del}"
}

#=== FUNCTION =================================================================
#        Name: get_host
# Description: Prints host info to main.
#==============================================================================

get_host() {
    if [[ -d /system/app/ && -d /system/priv-app ]]; then
        host="$(getprop ro.product.brand) $(getprop ro.product.model)"
    fi

    if [[ -f /sys/devices/virtual/dmi/id/board_vendor ||
        -f /sys/devices/virtual/dmi/id/board_name ]]; then
        host=$(< /sys/devices/virtual/dmi/id/board_vendor)
        host+=" $(< /sys/devices/virtual/dmi/id/board_name)"
    fi

    if [[ -f /sys/devices/virtual/dmi/id/product_name ||
        -f /sys/devices/virtual/dmi/id/product_version ]]; then
        host=$(< /sys/devices/virtual/dmi/id/product_name)
        host+=" $(< /sys/devices/virtual/dmi/id/product_version)"
    fi

    if [[ -f /sys/firmware/devicetree/base/model ]]; then
        host=$(< /sys/firmware/devicetree/base/model)
    fi

    if [[ -f /tmp/sysinfo/model ]]; then
        host=$(< /tmp/sysinfo/model)
    fi

    # Remove dummy OEM info.
    host=${host//To be filled by O.E.M.}
    host=${host//To Be Filled*}
    host=${host//OEM*}
    host=${host//Not Applicable}
    host=${host//System Product Name}
    host=${host//System Version}
    host=${host//Undefined}
    host=${host//Default string}
    host=${host//Not Specified}
    host=${host//Type1ProductConfigId}
    host=${host//INVALID}
    host=${host//All Series}

    case $model in
        "Standard PC"*) host="KVM/QEMU (${model})" ;;
        OpenBSD*)       host="vmm ($model)" ;;
    esac

	verbose "Finding hostname and user...found as '${host}'"
    if [ ! -z "$host" ]; then
        printf -v host "%b %b" "${b_mag}${bld}Host » \t" "${del}${b_wht}$host${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_cpu
# Description: Prints CPU info to main.
#==============================================================================

get_cpu () {
	while IFS=":" read -r type name; do
        case $type in
            "model name"*)
                IFS='@ ' read -r -a array <<< "$name";
                CPU="$name"
                CPU=${CPU#"${CPU%%[![:space:]]*}"}
                ;;
        esac
    done < /proc/cpuinfo
	verbose "Finding current CPU...found as '$CPU'"
    if [ ! -z "$CPU" ]; then
        printf -v cpu "%b %b" "${b_mag}${bld}CPU » \t" "${del}${b_wht}$CPU${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_gpu
# Description: Prints GPU info to main.
#==============================================================================

get_gpu () {
	if [[ -n "$(PATH="/opt/bin:$PATH" type -p nvidia-smi)" ]]; then
		GPU=$($(PATH="/opt/bin:$PATH" type -p nvidia-smi | cut -f1) -q | awk -F':' '/Product Name/ {gsub(/: /,":"); print $2}' | sed ':a;N;$!ba;s/\n/, /g')
	elif [[ -n "$(PATH="/usr/sbin:$PATH" type -p glxinfo)" && -z "${GPU}" ]]; then
		gpu_info=$($(PATH="/usr/sbin:$PATH" type -p glxinfo | cut -f1) 2>/dev/null)
		GPU=$(grep "OpenGL renderer string" <<< "${gpu_info}" | cut -d ':' -f2 | sed -n -e '1h;2,$H;${g;s/\n/, /g' -e 'p' -e '}')
		GPU="${GPU:1}"
		gpu_info=$(grep "OpenGL vendor string" <<< "${gpu_info}")
	elif [[ -n "$(PATH="/usr/sbin:$PATH" type -p lspci)" && -z "$GPU" ]]; then
		gpu_info=$($(PATH="/usr/bin:$PATH" type -p lspci | cut -f1) 2> /dev/null | grep VGA)
		GPU=$(grep -oE '\[.*\]' <<< "${gpu_info}" | sed 's/\[//;s/\]//' | sed -n -e '1h;2,$H;${g;s/\n/, /g' -e 'p' -e '}')
	fi

	if [ -n "$GPU" ];then
		if grep -q -i 'nvidia' <<< "${gpu_info}"; then
			gpu_info="NVidia "
		elif grep -q -i 'intel' <<< "${gpu_info}"; then
			gpu_info="Intel "
		elif grep -q -i 'amd' <<< "${gpu_info}"; then
			gpu_info="AMD "
		elif grep -q -i 'ati' <<< "${gpu_info}" || grep -q -i 'radeon' <<< "${gpu_info}"; then
			gpu_info="ATI "
		else
			gpu_info=$(cut -d ':' -f2 <<< "${gpu_info}")
			gpu_info="${gpu_info:1} "
		fi
		GPU="${GPU}"
	else
		GPU="Not_Found"
	fi

	verbose "Finding current GPU...found as '$GPU'"
    if [ ! -z "$GPU" ]; then
        printf -v gpu "%b %b" "${b_mag}${bld}GPU » \t" "${del}${b_wht}$GPU${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_intel_gpu
# Description: Prints intel GPU info to main.
#==============================================================================

get_intel_gpu() {
    GPU="Not_Found"
	if [ -r /proc/fb ]; then
		GPU=$(awk 'BEGIN {ORS = " &"} {$1="";print}' /proc/fb | sed  -r s/'^\s+|\s*&$'//g)
	fi

	case $GPU in
		*mfb)
			GPU=$(lspci | grep -i vga | awk -F ": " '{print $2}')
			;;
		*intel*)
			GPU="intel"
			;;
		*)
			GPU="Not_Found"
			;;
	esac

	if [[ "$GPU" = "intel" ]]; then
		#Detect CPU
		local CPU=$(uname -p | awk '{print $3}')
		CPU=${CPU#*'-'}; #Detect CPU number

		#Detect Intel GPU
		case $CPU in
			[3-6][3-9][0-5]|[3-6][3-9][0-5][K-Y])
				GPU='Intel HD Graphics'
				;; #1st
			2[1-5][0-3][0-2]*|2390T|2600S)
				GPU='Intel HD Graphics 2000'
				;; #2nd
			2[1-5][1-7][0-8]*|2105|2500K)
				GPU='Intel HD Graphics 3000'
				;; #2nd
			32[1-5]0*|3[4-5][5-7]0*|33[3-4]0*)
				GPU='Intel HD Graphics 2500'
				;; #3rd
			3570K|3427U)
				GPU='Intel HD Graphics 4000'
				;; #3rd
			4[3-7][0-9][0-5]*)
				GPU='Intel HD Graphics 4600'
				;; #4th Haswell
			5[5-6]75[C-R]|5350H)
				GPU='Intel Iris Pro Graphics 6200'
				;; #5th Broadwell
				#6th Skylake
				#7th Kabylake
				#8th Cannonlake
			*)
				GPU='Not_Applicable'
				;; #Unknown GPU model
		esac
	fi
    verbose "Finding intel GPU ...found as '$GPU'"
    if [ ! -z "$GPU" ]; then
        if [ ! "$gpu" == "Not_Found" ] && [ ! "$gpu" == "Not_Applicable" ]; then
            printf -v gpu "%b %b" "${b_mag}${bld}GPU » \t" "${del}${b_wht}$GPU${del}"
        fi
    fi
}

#=== FUNCTION =================================================================
#        Name: get_memory
# Description: Prints memory info to main.
#==============================================================================

get_memory () {
	while IFS=":" read -r a b; do
        case $a in
            "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
            "Shmem") ((mem_used+=${b/kB}))  ;;
            "MemFree" | "Buffers" | "Cached" | "SReclaimable")
                mem_used="$((mem_used-=${b/kB}))"
            ;;

            "MemAvailable")
                mem_avail=${b/kB}
            ;;
        esac
    done < /proc/meminfo

    if [[ $mem_avail ]]; then
        mem_used=$(((mem_total - mem_avail) / 1024))
    else
        mem_used="$((mem_used / 1024))"
    fi

    mem_total="$((mem_total / 1024))"

    mem_perc=$(( mem_used * 100 / mem_total ))

    mem_used=$(awk '{printf "%.2f", $1 / $2}' <<< "$mem_used 1024")
    mem_total=$(awk '{printf "%.2f", $1 / $2}' <<< "$mem_total 1024")
    mem_label=GiB

	mem="${mem_used}${mem_label:-MiB} / ${mem_total}${mem_label:-MiB} ${mem_perc:+(${mem_perc}%)}"
	verbose "Finding current RAM usage...found as '$mem'"
    if [ ! -z "$mem" ]; then
        printf -v mem "%b %b" "${b_mag}${bld}Memory » \t" "${del}${b_wht}$mem${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_res
# Description: Prints res info to main.
#==============================================================================

get_res () {
	xResolution="No X Server"
	if [[ -n ${DISPLAY} ]]; then
		if type -p xdpyinfo >/dev/null 2>&1; then
			xResolution=$(xdpyinfo | awk '/^ +dimensions/ {print $2}')
		fi
	fi
    if type -p xrandr >/dev/null && [[ $DISPLAY && -z $WAYLAND_DISPLAY ]]; then
        xResolution="$(xrandr --nograb --current |\
            awk 'match($0,/[0-9]*\.[0-9]*\*/) {
            printf $1 " @ " substr($0,RSTART,RLENGTH) "Hz, "}')"
    fi
    xResolution="${xResolution//\*}"
    xResolution="${xResolution%%,}"
    xResolution="${xResolution%%, }"
	verbose "Finding current resolution(s)...found as '$xResolution'"
    if [ ! -z "$xResolution" ]; then
        printf -v res "%b %b" "${b_mag}${bld}Resolution » \t" "${del}${b_wht}$xResolution${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_disk
# Description: Prints disk info to main.
#==============================================================================

get_disk () {
	diskusage="Unknown"
	if type -p df >/dev/null 2>&1; then
		totaldisk=$(df -h -x aufs -x tmpfs -x overlay -x drvfs -x devtmpfs --total 2>/dev/null | tail -1)
		disktotal=$(awk '{print $2}' <<< "${totaldisk}")
		diskused=$(awk '{print $3}' <<< "${totaldisk}")
		diskusedper=$(awk '{print $5}' <<< "${totaldisk}")
		diskusage="${diskused} / ${disktotal} (${diskusedper})"
		diskusage_verbose=$(sed 's/%/%%/' <<< "$diskusage")
	fi
	verbose "Finding current disk usage...found as '$diskusage_verbose'"
    if [ ! -z "$diskusage" ]; then
        printf -v disk "%b %b" "${b_mag}${bld}Disk » \t" "${del}${b_wht}$diskusage${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_pinfo
# Description: Prints pinfo info to main.
#==============================================================================

get_pinfo () {
    printf -v pinfo "%b" "${b_red}╠═══════════════${b_grn} Peripherals Information ${b_red}═══════════════╣${del}"
}

#=== FUNCTION =================================================================
#        Name: get_keyboard
# Description: Prints keyboard info to main.
#==============================================================================

get_keyboard () {
    DataOut=
	keyboard="Unknown"
    while IFS= read -r Line; do
        if [[ $Line == *"Keyboard"* ]]; then
            keyboard="${Line%,*}"
        fi
    done <<< $( hwinfo --short )

    IFS=' ' read -a Arr <<< $keyboard
    for Val in "${Arr[@]}"; do
	    LCase=${Val,,}
	    [ -z "${AArr[$LCase]}" ] && AArr[$LCase]=$Val && DataOut=$DataOut' '$Val
    done
    keyboard="${DataOut:1}"
    keyboard=${keyboard#"${keyboard%%[![:space:]]*}"}

	verbose "Finding current disk usage...found as '$keyboard'"
    if [ ! -z "$keyboard" ]; then
        printf -v keyboard "%b %b" "${b_mag}${bld}Keyboard » \t" "${del}${b_wht}$keyboard${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_mouse
# Description: Prints mouse info to main.
#==============================================================================

get_mouse () {
    DataOut=
	mouse="Unknown"
    while IFS= read -r Line; do
        if [[ $Line == *"Mouse"* ]]; then
            mouse="${Line%,*}"
        fi
    done <<< $( hwinfo --short )

    IFS=' ' read -a Arr <<< $mouse
    for Val in "${Arr[@]}"; do
	    LCase=${Val,,}
	    [ -z "${AArr[$LCase]}" ] && AArr[$LCase]=$Val && DataOut=$DataOut' '$Val
    done
    mouse="${DataOut:1}"
    mouse=${mouse#* }
    mouse=${mouse#"${mouse%%[![:space:]]*}"}

	verbose "Finding current disk usage...found as '$mouse'"
    if [ ! -z "$mem" ]; then
        printf -v mouse "%b %b" "${b_mag}${bld}Mouse » \t" "${del}${b_wht}$mouse${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_monitor
# Description: Prints monitor info to main.
#==============================================================================

get_monitor () {
    DataOut=
	monitor="Unknown"
    while IFS= read -r Line; do
        if [[ ! $Line == "monitor"* ]]; then
            monitor="${Line%,*}"
        fi
    done <<< $( hwinfo --short --monitor )

    IFS=' ' read -a Arr <<< $monitor
    for Val in "${Arr[@]}"; do
	    LCase=${Val,,}
	    [ -z "${AArr[$LCase]}" ] && AArr[$LCase]=$Val && DataOut=$DataOut' '$Val
    done
    monitor="${DataOut:1}"
    monitor=${monitor#"${monitor%%[![:space:]]*}"}

	verbose "Finding current disk usage...found as '$monitor'"
    if [ ! -z "$monitor" ]; then
        printf -v monitor "%b %b" "${b_mag}${bld}Monitor » \t" "${del}${b_wht}$monitor${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_audio
# Description: Prints audio info to main.
#==============================================================================

get_audio () {
    DataOut=
	audio="Unknown"
    while IFS= read -r Line; do
        if [[ $Line == *"Server Name"* ]]; then
            IFS=':' read Type Server <<< "$Line";
            audio="${Server%,*}"
        fi
    done <<< $( pactl info )

    IFS=' ' read -a Arr <<< $audio
    for Val in "${Arr[@]}"; do
	    LCase=${Val,,}
	    [ -z "${AArr[$LCase]}" ] && AArr[$LCase]=$Val && DataOut=$DataOut' '$Val
    done
    audio="${DataOut:1}"
    audio=${audio#"${audio%%[![:space:]]*}"}

	verbose "Finding current disk usage...found as '$audio'"
    if [ ! -z "$audio" ]; then
        printf -v audio "%b %b" "${b_mag}${bld}Audio » \t" "${del}${b_wht}$audio${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_swinfo
# Description: Prints hwinfo info to main.
#==============================================================================

get_swinfo () {
    printf -v swinfo "%b" "${b_red}╠════════════════${b_grn} Software Information ${b_red}═════════════════╣${del}"
}

#=== FUNCTION =================================================================
#        Name: get_distro
# Description: Prints distro info to main.
#==============================================================================
get_distro () {
    local distro_detect=""
    if [[ -z "${distro}" ]]; then
        distro="Unknown"
        # LSB Release or MCST Version Check
        if type -p lsb_release >/dev/null 2>&1; then
            distro_detect="$(lsb_release -si)"
            distro_release="$(lsb_release -sr)"
            distro_codename="$(lsb_release -sc)"
            case "${distro_detect}" in
                "archlinux"|"Arch Linux"|"arch"|"Arch"|"archarm")
                    distro="Arch Linux"
                    distro_release="n/a"
                    if [ -f /etc/os-release ]; then
                        os_release="/etc/os-release";
                    elif [ -f /usr/lib/os-release ]; then
                        os_release="/usr/lib/os-release";
                    fi
                    if [[ -n ${os_release} ]]; then
                        if grep -q 'antergos' /etc/os-release; then
                            distro="Antergos"
                            distro_release="n/a"
                        fi
                        if grep -q -i 'logos' /etc/os-release; then
                            distro="Logos"
                            distro_release="n/a"
                        fi
                        if grep -q -i 'swagarch' /etc/os-release; then
                            distro="SwagArch"
                            distro_release="n/a"
                        fi
                        if grep -q -i 'obrevenge' /etc/os-release; then
                            distro="OBRevenge"
                            distro_release="n/a"
                        fi
                        if grep -q -i 'Alter' /etc/os-release; then
                            distro="Alter Linux"
                            distro_release="n/a"
                        fi
                    fi
                    ;;
                "ArcoLinux")
                    distro="ArcoLinux"
                    distro_release="n/a"
                    ;;
                "artixlinux"|"Artix Linux"|"artix"|"Artix"|"Artix release")
                    distro="Artix"
                    ;;
                "elementary"|"elementary OS")
                    distro="elementary OS"
                    ;;
                "Gentoo")
                    if [[ "$(lsb_release -sd)" =~ "Funtoo" ]]; then
                        distro="Funtoo"
                    else
                        distro="Gentoo"
                    fi

                    #detecting release stable/testing/experimental
                    if [[ -f /etc/portage/make.conf ]]; then
                        source /etc/portage/make.conf
                    elif [[ -d /etc/portage/make.conf ]]; then
                        source /etc/portage/make.conf/*
                    fi

                    case $ACCEPT_KEYWORDS in
                        [a-z]*) distro_release=stable       ;;
                        ~*)     distro_release=testing      ;;
                        '**')   distro_release=experimental ;; #experimental usually includes git-versions.
                    esac
                    ;;
                "ManjaroLinux")
                    distro="Manjaro"
                    ;;
                "LinuxMint")
                    distro="Mint"
                    ;;
                "openSUSE"|"openSUSE project"|"SUSE LINUX" | "SUSE")
                    distro="openSUSE"
                    if [ -f /etc/os-release ]; then
                        if grep -q -i 'SUSE Linux Enterprise' /etc/os-release ; then
                            distro="SUSE Linux Enterprise"
                            distro_codename="n/a"
                            distro_release=$(awk -F'=' '/^VERSION_ID=/ {print $2}' /etc/os-release | tr -d '"')
                        fi
                    fi
                    if [[ "${distro_codename}" == "Tumbleweed" ]]; then
                        distro_release="n/a"
                    fi
                    ;;
                *)
                    if [ "x$(printf "${distro_detect}" | od -t x1 | sed -e 's/^\w*\ *//' | tr '\n' ' ' | grep 'eb b6 89 ec 9d 80 eb b3 84 ')" != "x" ]; then
                        distro="Red Star OS"
                        distro_codename="n/a"
                        distro_release=$(printf "${distro_release}" | grep -o '[0-9.]' | tr -d '\n')
                    else
                        distro="${distro_detect}"
                    fi
                    ;;
            esac
            if [[ -n ${distro_release} && ${distro_release} != "n/a" ]]; then
                distro_more="$distro_release"
            fi
            if [[ -n ${distro_codename} && ${distro_codename} != "n/a" ]]; then
                distro_more="$distro_more $distro_codename"
            fi
        fi
    fi

    case $distro in
        arch|arch*linux) distro="Arch Linux" ;;
        arcolinux|arcolinux*) distro="ArcoLinux" ;;
        artix|artix*linux) distro="Artix Linux" ;;
        endeavour*) distro="EndeavourOS" ;;
        fedora) distro="Fedora" ;;
        funtoo) distro="Funtoo" ;;
        gentoo) distro="Gentoo" ;;
        manjaro) distro="Manjaro" ;;
        mint|linux*mint) distro="Mint" ;;
        opensuse) distro="openSUSE" ;;
        ubuntu) distro="Ubuntu";;
        void*linux) distro="Void Linux" ;;
    esac

    verbose "Finding distro...found as '${distro} ${distro_release}'"
    if [ ! -z "$distro" ]; then
        printf -v distro "%b %b" "${b_mag}${bld}Distro » \t" "${del}${b_wht}$distro${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_init
# Description: Prints init info to main.
#==============================================================================

get_init () {
	init=$(readlink /sbin/init)
	init=${init##*/}
	init=${init%%-*}

	verbose "Finding init...found as '${init}'"
    if [ ! -z "$init" ]; then
        printf -v init "%b %b" "${b_mag}${bld}Init » \t" "${del}${b_wht}$init${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_kernel
# Description: Prints kernel info to main.
#==============================================================================

get_kernel () {
	kernel=$(uname -srm)
	kernel=${kernel% *}
	verbose "Finding kernel version...found as '${kernel}'"
    if [ ! -z "$kernel" ]; then
        printf -v kernel "%b %b" "${b_mag}${bld}Kernel » \t" "${del}${b_wht}$kernel${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_pkgs
# Description: Prints packages info to main.
#==============================================================================

get_pkgs () {
	pkgs="Unknown"
    basher=""
    pip=""
    dist=$(clean ${distro##* })
	case "${dist}" in
		'Arch Linux'|'Arch Linux 32'|'ArcoLinux'|'Parabola GNU/Linux-libre'|'Hyperbola GNU/Linux-libre'|'Chakra'|'Manjaro'|'Antergos'| \
		'Netrunner'|'KaOS'|'Obarun'|'SwagArch'|'OBRevenge'|'Artix Linux'|'EndeavourOS'|'Alter Linux'|'TeArch')
            if [ "$(pacman -Qqm | wc -l)" -gt "0" ]; then
                pkgs="pacman [$(pacman -Qqn | wc -l)] aur [$(pacman -Qqm | wc -l)]"
            else
			    pkgs="pacman [$(pacman -Qqn | wc -l)]"
            fi
            ;;
		'Debian'|'Ubuntu'|'Mint'|'Fuduntu'|'KDE neon'|'Devuan'|'OS Elbrus'|'Raspbian'|'LMDE'|'CrunchBang'|'Peppermint'| \
		'LinuxDeepin'|'Deepin'|'Kali Linux'|'Trisquel'|'elementary OS'|'gNewSense'|'BunsenLabs'|'SteamOS'|'Parrot Security'| \
		'GrombyangOS'|'DesaOS'|'Zorin OS'|'Proxmox VE'|'PureOS'|'DraugerOS')
            pkgs="dpkg [$(dpkg -l | grep -c '^i')]"
            ;;
		'Gentoo'|'Sabayon'|'Funtoo'|'Kogaion')
			pkgs="emerge [$(q qlist -I | wc -l)]"
            ;;
		'ALDOS'|'Fedora'|'Fux'|'Korora'|'BLAG'|'Chapeau'|'openSUSE'|'SUSE Linux Enterprise'|'Red Hat Enterprise Linux'| \
		'ROSA'|'Oracle Linux'|'Scientific Linux'|'EuroLinux'|'CentOS'|'CentOS Stream'|'Mandriva'|'Mandrake'|'Mageia'|'Mer'|'SailfishOS'|'PCLinuxOS'|'Viperr'|'Qubes OS'| \
		'Red Star OS'|'blackPanther OS'|'Amazon Linux')
			pkgs="rpm [$(rpm -qa | wc -l)]"
            ;;
		'Void Linux')
			pkgs="xbps [$(xbps-query -l | wc -l)]"
            ;;
		'Source Mage GNU/Linux')
			pkgs="gaze [$(gaze installed | wc -l)]"
            ;;
	esac

	verbose "Finding current package count...found as '$pkgs'"
    if [ ! -z "$pkgs" ]; then
        printf -v pkgs "%b %b" "${b_mag}${bld}Packages » \t" "${del}${b_wht}$pkgs${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: shell_ver
# Description: Prints shell version to get_shell.
#==============================================================================

shell_ver () {
	local version_data='' version='' get_version='--version'

	version_data="$( $1 $get_version 2>/dev/null )"

	if [[ -n $version_data ]];then
		version=$(awk '
		BEGIN {
			IGNORECASE=1
		}
		/'$2'/ {
			gsub(/(,|v|V)/, "",$'$3')
			if ($2 ~ /[Bb][Aa][Ss][Hh]/) {
				gsub(/\(.*|-release|-version\)/,"",$4)
			}
			print $'$3'
			exit # quit after first match prints
		}' <<< "$version_data")
	fi
	echo "$version"
}

#=== FUNCTION =================================================================
#        Name: get_shell
# Description: Prints shell info to main.
#==============================================================================

get_shell () {
	if [[ ! "${shell_type}" ]]; then
		if [[ "${distro}" == "Cygwin" || "${distro}" == "Msys" || "${distro}" == "Haiku" || "${distro}" == "Alpine Linux" ||
			"${distro}" == "Mac OS X" || "${distro}" == "macOS" || "${distro}" == "TinyCore" || "${distro}" == "Raspbian" || "${OSTYPE}" == "gnu" ]]; then
			shell_type=$(echo "$SHELL" | awk -F'/' '{print $NF}')
		elif readlink -f "$SHELL" 2>&1 | grep -q -i 'busybox'; then
			shell_type="BusyBox"
		else
			if [[ "${OSTYPE}" =~ "linux" ]]; then
				shell_type=$(realpath /proc/$PPID/exe | awk -F'/' '{print $NF}')
			elif [[ "${distro}" =~ "BSD" ]]; then
				shell_type=$(ps -p $PPID -o command | tail -1)
			else
				shell_type=$(ps -p "$(ps -p $PPID | awk '$1 !~ /PID/ {print $1}')" | awk 'FNR>1 {print $1}')
			fi
			shell_type=${shell_type/-}
			shell_type=${shell_type//*\/}
		fi
	fi

	case $shell_type in
		bash)
			shell_version_data=$( shell_ver "$shell_type" "^GNU.bash,.version" "4" )
			;;
		dash)
			shell_version_data=$( shell_ver "$shell_type" "$shell_type" "3" )
			;;
		zsh)
			shell_version_data=$( shell_ver "$shell_type" "^zsh" "2" )
			;;
		fish)
			shell_version_data=$( fish --version | awk '{print $3}' )
			;;
	esac

	if [[ -n $shell_version_data ]];then
		shell_type="$shell_type $shell_version_data"
	fi

	myShell=${shell_type}
	verbose "Finding current shell...found as '$myShell'"
    if [ ! -z "$myShell" ]; then
        printf -v shell "%b %b" "${b_mag}${bld}Shell » \t" "${del}${b_wht}$myShell${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_term
# Description: Prints terminal info to main.
#==============================================================================
get_term () {
    if [[ -z "$term" ]]; then
        # Check $PPID for terminal emulator.
        while [[ -z "$term" ]]; do
            parent="$(get_ppid "$parent")"
            [[ -z "$parent" ]] && break
            name="$(get_process_name "$parent")"

            case ${name// } in
                "${SHELL/*\/}"|*"sh"|"screen"|"su"*|"newgrp") ;;

                "login"*|*"Login"*|"init"|"(init)")
                    term="$(tty)"
                ;;

                "ruby"|"1"|"tmux"*|"systemd"|"sshd"*|"python"*|\
                "USER"*"PID"*|"kdeinit"*|"launchd"*|"bwrap")
                    break
                ;;

                "gnome-terminal-") term="gnome-terminal" ;;
                "urxvtd")          term="urxvt" ;;
                *"nvim")           term="Neovim Terminal" ;;
                *"NeoVimServer"*)  term="VimR Terminal" ;;

                *)
                    # Fix issues with long process names on Linux.
                    [[ $os == Linux ]] && term=$(realpath "/proc/$parent/exe")

                    term="${name##*/}"

                    # Fix wrapper names in Nix.
                    [[ $term == .*-wrapped ]] && {
                        term="${term#.}"
                        term="${term%-wrapped}"
                    }
                ;;
            esac
        done
    fi
    verbose "Finding current terminal...found as '$term'"
    if [ ! -z "$term" ]; then
        printf -v term "%b %b" "${b_mag}${bld}Terminal » \t" "${del}${b_wht}$term${del}"
    fi
}

#=== FUNCTION =================================================================
#        Name: get_de
# Description: Prints de info to main.
#==============================================================================

get_de () {
	DE="Not_Found"
	if [[ "${distro}" == "Mac OS X" || "${distro}" == "macOS" ]]; then
		if ps -U "${USER}" | grep -q -i 'finder'; then
			DE="Aqua"
		fi
	elif [[ "${distro}" == "Cygwin" || "${distro}" == "Msys" ]]; then
		# https://msdn.microsoft.com/en-us/library/ms724832%28VS.85%29.aspx
		if wmic os get version | grep -q '^\(6\.[01]\)'; then
			DE="Aero"
		elif wmic os get version | grep -q '^\(6\.[23]\|10\)'; then
			DE="Modern UI/Metro"
		else
			DE="Luna"
		fi
	elif [[ -n ${DISPLAY} ]]; then
		if type -p xprop >/dev/null 2>&1;then
			xprop_root="$(xprop -root 2>/dev/null)"
			if [[ -n ${xprop_root} ]]; then
				DE=$(echo "${xprop_root}" | awk 'BEGIN {
					de = "Not_Applicable"
				}
				{
					if ($1 ~ /^_DT_SAVE_MODE/) {
						de = $NF
						gsub(/"/,"",de)
						de = toupper(de)
						exit
					}
					else if ($1 ~/^KDE_SESSION_VERSION/) {
						de = "KDE"$NF
						exit
					}
					else if ($1 ~ /^_MUFFIN/) {
						de = "Cinnamon"
						exit
					}
					else if ($1 ~ /^TDE_FULL_SESSION/) {
						de = "Trinity"
						exit
					}
					else if ($0 ~ /"xfce4"/) {
						de = "Xfce4"
						exit
					}
					else if ($0 ~ /"xfce5"/) {
						de = "Xfce5"
						exit
					}
				} END {
					print de
				}')
			fi
		fi

		if [[ ${DE} == "Not_Applicable" ]]; then
			# Let's use xdg-open code for GNOME/Enlightment/KDE/LXDE/MATE/Xfce detection
			# http://bazaar.launchpad.net/~vcs-imports/xdg-utils/master/view/head:/scripts/xdg-utils-common.in#L251
			if [ -n "${XDG_CURRENT_DESKTOP}" ]; then
				case "${XDG_CURRENT_DESKTOP,,}" in
					'enlightenment')
						DE="Enlightenment"
						;;
					'gnome')
						DE="GNOME"
						;;
					'kde')
						DE="KDE"
						;;
					'lumina')
						DE="Lumina"
						;;
					'lxde')
						DE="LXDE"
						;;
					'mate')
						DE="MATE"
						;;
					'xfce')
						DE="Xfce"
						;;
					'x-cinnamon')
						DE="Cinnamon"
						;;
					'unity')
						DE="Unity"
						;;
					'lxqt')
						DE="LXQt"
						;;
				esac
			fi

			if [ -n "$DE" ]; then
				# classic fallbacks
				if [ -n "$KDE_FULL_SESSION" ]; then
					DE="KDE"
				elif [ -n "$TDE_FULL_SESSION" ]; then
					DE="Trinity"
				elif [ -n "$GNOME_DESKTOP_SESSION_ID" ]; then
					DE="GNOME"
				elif [ -n "$MATE_DESKTOP_SESSION_ID" ]; then
					DE="MATE"
				elif dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus \
					org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager >/dev/null 2>&1 ; then
					DE="GNOME"
				elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep -q -i ' = \"xfce4\"$'; then
					DE="Xfce"
				elif xprop -root 2> /dev/null | grep -q -i '^xfce_desktop_window'; then
					DE="Xfce"
				elif echo "$DESKTOP" | grep -q -i '^Enlightenment'; then
					DE="Enlightenment"
				fi
			fi

			if [[ -z "$DE" || "$DE" = "Not_Applicable" ]]; then
				# fallback to checking $DESKTOP_SESSION
				local _DESKTOP_SESSION=
				if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
					if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
						_DESKTOP_SESSION=${DESKTOP_SESSION,,}
					else
						_DESKTOP_SESSION="$(tr '[:upper:]' '[:lower:]' <<< "${DESKTOP_SESSION}")"
					fi
				else
					_DESKTOP_SESSION="$(tr '[:upper:]' '[:lower:]' <<< "${DESKTOP_SESSION}")"
				fi
				case "${_DESKTOP_SESSION}" in
					'gnome'*)
						DE="GNOME"
						;;
					'deepin')
						DE="Deepin"
						;;
					'lumina')
						DE="Lumina"
						;;
					'lxde'|'lubuntu')
						DE="LXDE"
						;;
					'mate')
						DE="MATE"
						;;
					'xfce'*)
						DE="Xfce"
						;;
					'budgie-desktop')
						DE="Budgie"
						;;
					'cinnamon')
						DE="Cinnamon"
						;;
					'trinity')
						DE="Trinity"
						;;
				esac
			fi

			if [ -n "$DE" ]; then
				# fallback to checking $GDMSESSION
				case "${GDMSESSION,,}" in
					'lumina'*)
						DE="Lumina"
						;;
					'mate')
						DE="MATE"
						;;
				esac
			fi

			if [[ ${DE} == "GNOME" ]]; then
				if type -p xprop >/dev/null 2>&1; then
					if xprop -name "unity-launcher" >/dev/null 2>&1; then
						DE="Unity"
					elif xprop -name "launcher" >/dev/null 2>&1 &&
						xprop -name "panel" >/dev/null 2>&1; then
						DE="Unity"
					fi
				fi
			fi

			if [[ ${DE} == "KDE" ]]; then
				if [[ -n ${KDE_SESSION_VERSION} ]]; then
					if [[ ${KDE_SESSION_VERSION} == '5' ]]; then
						DE="KDE5"
					elif [[ ${KDE_SESSION_VERSION} == '4' ]]; then
						DE="KDE4"
					fi
				elif [[ ${KDE_FULL_SESSION} == 'true' ]]; then
					DE="KDE"
					DEver_data=$(kded --version 2>/dev/null)
					DEver=$(grep -si '^KDE:' <<< "$DEver_data" | awk '{print $2}')
				fi
			fi
		fi

		if [[ ${DE} != "Not_Applicable" ]]; then
			if [[ ${DE} == "Cinnamon" ]]; then
				if type -p >/dev/null 2>&1; then
					DEver=$(cinnamon --version)
					DE="${DE} ${DEver//* }"
				fi
			elif [[ ${DE} == "GNOME" ]]; then
				if type -p gnome-control-center>/dev/null 2>&1; then
					DEver=$(gnome-control-center --version 2> /dev/null)
					DE="${DE} ${DEver//* }"
				elif type -p gnome-session-properties >/dev/null 2>&1; then
					DEver=$(gnome-session-properties --version 2> /dev/null)
					DE="${DE} ${DEver//* }"
				elif type -p gnome-session >/dev/null 2>&1; then
					DEver=$(gnome-session --version 2> /dev/null)
					DE="${DE} ${DEver//* }"
				fi
			elif [[ ${DE} == "KDE4" || ${DE} == "KDE5" ]]; then
				if type -p kded${DE#KDE} >/dev/null 2>&1; then
					DEver=$(kded${DE#KDE} --version)
					if [[ $(( $(echo "$DEver" | wc -w) )) -eq 2 ]] && [[ "$(echo "$DEver" | cut -d ' ' -f1)" == "kded${DE#KDE}" ]]; then
						DEver=$(echo "$DEver" | cut -d ' ' -f2)
						DE="KDE ${DEver}"
					else
						for l in $(echo "${DEver// /_}"); do
							if [[ ${l//:*} == "KDE_Development_Platform" ]]; then
								DEver=${l//*:_}
								DE="KDE ${DEver//_*}"
							fi
						done
					fi
					if pgrep -U ${UID} plasmashell >/dev/null 2>&1; then
						DEver=$(plasmashell --version | cut -d ' ' -f2)
						DE="$DE / Plasma $DEver"
					fi
				fi
			elif [[ ${DE} == "Lumina" ]]; then
				if type -p Lumina-DE.real >/dev/null 2>&1; then
					lumina="$(type -p Lumina-DE.real)"
				elif type -p Lumina-DE >/dev/null 2>&1; then
					lumina="$(type -p Lumina-DE)"
				fi
				if [ -n "$lumina" ]; then
					if grep -q '--version' "$lumina"; then
						DEver=$("$lumina" --version 2>&1 | tr -d \")
						DE="${DE} ${DEver}"
					fi
				fi
			elif [[ ${DE} == "LXQt" ]]; then
				if type -p lxqt-about >/dev/null 2>&1; then
					DEver=$(lxqt-about --version | awk '/^liblxqt/ {print $2}')
					DE="${DE} ${DEver}"
				fi
			elif [[ ${DE} == "MATE" ]]; then
				if type -p mate-session >/dev/null 2>&1; then
					DEver=$(mate-session --version)
					DE="${DE} ${DEver//* }"
				fi
			elif [[ ${DE} == "Unity" ]]; then
				if type -p unity >/dev/null 2>&1; then
					DEver=$(unity --version)
					DE="${DE} ${DEver//* }"
				fi
			elif [[ ${DE} == "Deepin" ]]; then
				if [[ -f /etc/deepin-version ]]; then
					DEver="$(awk -F '=' '/Version/ {print $2}' /etc/deepin-version)"
					DE="${DE} ${DEver//* }"
				fi
			elif [[ ${DE} == "Trinity" ]]; then
				if type -p tde-config >/dev/null 2>&1; then
					DEver="$(tde-config --version | awk -F ' ' '/TDE:/ {print $2}')"
					DE="${DE} ${DEver//* }"
				fi
			fi
		fi

		if [[ "${DE}" == "Not_Applicable" ]]; then
			if pgrep -U ${UID} lxsession >/dev/null 2>&1; then
				DE="LXDE"
				if type -p lxpanel >/dev/null 2>&1; then
					DEver=$(lxpanel -v)
					DE="${DE} $DEver"
				fi
			elif pgrep -U ${UID} lxqt-session >/dev/null 2>&1; then
				DE="LXQt"
			elif pgrep -U ${UID} razor-session >/dev/null 2>&1; then
				DE="RazorQt"
			elif pgrep -U ${UID} dtsession >/dev/null 2>&1; then
				DE="CDE"
			fi
		fi
	fi
	verbose "Finding desktop environment...found as '$DE'"
    if [ ! -z "$DE" ]; then
        if [ ! "$DE" == "Not_Found" ] && [ ! "$DE" == "Not_Applicable" ]; then
            printf -v de "%b %b" "${b_mag}${bld}DE » \t\t" "${del}${b_wht}$DE${del}"
        fi
    fi
}

#=== FUNCTION =================================================================
#        Name: get_wm
# Description: Prints wm info to main.
#==============================================================================

get_wm () {
	WM="Not_Found"
	if [[ ${distro} == "Mac OS X" || ${distro} == "macOS" ]]; then
		if ps -U "${USER}" | grep -q -i 'finder'; then
			WM="Quartz Compositor"
		fi
	elif [[ "${distro}" == "Cygwin" || "${distro}" == "Msys" ]]; then
		if [ "$(tasklist | grep -o 'bugn' | tr -d '\r \n')" = "bugn" ]; then
			WM="bug.n"
		elif [ "$(tasklist | grep -o 'Windawesome' | tr -d '\r \n')" = "Windawesome" ]; then
			WM="Windawesome"
		elif [ "$(tasklist | grep -o 'blackbox' | tr -d '\r \n')" = "blackbox" ]; then
			WM="Blackbox"
		else
			WM="DWM/Explorer"
		fi
	elif [[ -n ${DISPLAY} ]]; then
		if [[ "${distro}" == "FreeBSD" ]]; then
			pgrep_flags="-aU"
		else
			pgrep_flags="-U"
		fi
		for each in "${wmnames[@]}"; do
			PID="$(pgrep ${pgrep_flags} ${UID} "^$each$")"
			if [ "$PID" ]; then
				case $each in
					'2bwm') WM="2bwm";;
					'9wm') WM="9wm";;
					'awesome') WM="Awesome";;
					'beryl') WM="Beryl";;
					'blackbox') WM="BlackBox";;
					'bspwm') WM="bspwm";;
					'budgie-wm') WM="BudgieWM";;
					'chromeos-wm') WM="chromeos-wm";;
					'cinnamon') WM="Muffin";;
					'compiz') WM="Compiz";;
					'deepin-wm') WM="deepin-wm";;
					'dminiwm') WM="dminiwm";;
					'dtwm') WM="dtwm";;
					'dwm') WM="dwm";;
					'e16') WM="E16";;
					'emerald') WM="Emerald";;
					'enlightenment') WM="E17";;
					'fluxbox') WM="FluxBox";;
					'flwm'|'flwm_topside') WM="FLWM";;
					'fvwm') WM="FVWM";;
					'herbstluftwm') WM="herbstluftwm";;
					'howm') WM="howm";;
					'i3') WM="i3";;
					'icewm') WM="IceWM";;
					'kwin') WM="KWin";;
					'metacity') WM="Metacity";;
					'monsterwm') WM="monsterwm";;
					'musca') WM="Musca";;
					'mwm') WM="MWM";;
					'notion') WM="Notion";;
					'openbox') WM="OpenBox";;
					'pekwm') WM="PekWM";;
					'ratpoison') WM="Ratpoison";;
					'sawfish') WM="Sawfish";;
					'scrotwm') WM="ScrotWM";;
					'spectrwm') WM="SpectrWM";;
					'stumpwm') WM="StumpWM";;
					'subtle') WM="subtle";;
					'sway') WM="sway";;
					'swm') WM="swm";;
					'twin') WM="TWin";;
					'wmaker') WM="WindowMaker";;
					'wmfs') WM="WMFS";;
					'wmii') WM="wmii";;
					'xfwm4') WM="Xfwm4";;
					'xmonad.*') WM="XMonad";;
				esac
			fi
			if [[ ${WM} != "Not_Applicable" ]]; then
				break 1
			fi
		done

		if [[ ${WM} == "Not_Found" ]]; then
			if type -p xprop >/dev/null 2>&1; then
				WM=$(xprop -root _NET_SUPPORTING_WM_CHECK)
				if [[ "$WM" =~ 'Not_Found' ]]; then
					WM="Not_Applicable"
				elif [[ "$WM" =~ 'Not_Found' ]]; then
					WM="Not_Applicable"
				elif [[ "$WM" =~ '[Ii]nvalid window id format' ]]; then
					WM="Not_Applicable"
				elif [[ "$WM" =~ "no such" ]]; then
					WM="Not_Applicable"
				else
					WM=${WM//* }
					WM=$(xprop -id "${WM}" 8s _NET_WM_NAME)
					WM=$(echo "$(WM=${WM//*= }; echo "${WM//\"}")")
				fi
			fi
		fi

		# Proper format WM names that need it.
		if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
			if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
				WM_lower=${WM,,}
			else
				WM_lower="$(tr '[:upper:]' '[:lower:]' <<< "${WM}")"
			fi
		else
			WM_lower="$(tr '[:upper:]' '[:lower:]' <<< "${WM}")"
		fi
		case ${WM_lower} in
			*'gala'*) WM="Gala";;
			'2bwm') WM="2bwm";;
			'awesome') WM="Awesome";;
			'beryl') WM="Beryl";;
			'blackbox') WM="BlackBox";;
			'budgiewm') WM="BudgieWM";;
			'chromeos-wm') WM="chromeos-wm";;
			'cinnamon') WM="Cinnamon";;
			'compiz') WM="Compiz";;
			'deepin-wm') WM="Deepin WM";;
			'dminiwm') WM="dminiwm";;
			'dwm') WM="dwm";;
			'e16') WM="E16";;
			'echinus') WM="echinus";;
			'emerald') WM="Emerald";;
			'enlightenment') WM="E17";;
			'fluxbox') WM="FluxBox";;
			'flwm'|'flwm_topside') WM="FLWM";;
			'fvwm') WM="FVWM";;
			'gnome shell'*) WM="Mutter";;
			'herbstluftwm') WM="herbstluftwm";;
			'howm') WM="howm";;
			'i3') WM="i3";;
			'icewm') WM="IceWM";;
			'kwin') WM="KWin";;
			'metacity') WM="Metacity";;
			'monsterwm') WM="monsterwm";;
			'muffin') WM="Muffin";;
			'musca') WM="Musca";;
			'mutter'*) WM="Mutter";;
			'mwm') WM="MWM";;
			'notion') WM="Notion";;
			'openbox') WM="OpenBox";;
			'pekwm') WM="PekWM";;
			'ratpoison') WM="Ratpoison";;
			'sawfish') WM="Sawfish";;
			'scrotwm') WM="ScrotWM";;
			'spectrwm') WM="SpectrWM";;
			'stumpwm') WM="StumpWM";;
			'subtle') WM="subtle";;
			'sway') WM="sway";;
			'swm') WM="swm";;
			'twin') WM="TWin";;
			'wmaker') WM="WindowMaker";;
			'wmfs') WM="WMFS";;
			'wmii') WM="wmii";;
			'xfwm4') WM="Xfwm4";;
			'xmonad') WM="XMonad";;
		esac
	fi
	verbose "Finding window manager...found as '$WM'"
    if [ ! -z "$WM" ]; then
        if [ ! "$WM" == "Not_Found" ] && [ ! "$WM" == "Not_Applicable" ]; then
            printf -v wm "%b %b" "${b_mag}${bld}WM » \t\t" "${del}${b_wht}$WM${del}"
        fi
    fi
}

#=== FUNCTION =================================================================
#        Name: get_wmtheme
# Description: Prints wmtheme info to main.
#==============================================================================

get_wmtheme () {
	Win_theme="Not_Found"
	case $WM in
		'2bwm'|'9wm'|'Beryl'|'bspwm'|'dminiwm'|'dwm'|'echinus'|'FVWM'|'howm'|'i3'|'monsterwm'|'Musca'|\
		'Notion'|'Ratpoison'|'ScrotWM'|'SpectrWM'|'swm'|'subtle'|'WindowMaker'|'WMFS'|'wmii'|'XMonad')
			Win_theme="Not_Applicable"
		;;
		'Awesome')
			if [ -f "/usr/bin/awesome-client" ]; then
				Win_theme="$(/usr/bin/awesome-client "return require('beautiful').theme_path" | grep -oP '[^/]*(?=/"$)')"
			fi
		;;
		'BlackBox')
			if [ -f "$HOME/.blackboxrc" ]; then
				Win_theme="$(awk -F"/" '/styleFile/ {print $NF}' "$HOME/.blackboxrc")"
			fi
		;;
		'BudgieWM')
			Win_theme="$(gsettings get org.gnome.desktop.wm.preferences theme)"
			Win_theme="${Win_theme//\'}"
		;;
		'Cinnamon'|'Muffin')
			de_theme="$(gsettings get org.cinnamon.theme name)"
			de_theme=${de_theme//"'"}
			win_theme="$(gsettings get org.cinnamon.desktop.wm.preferences theme)"
			win_theme=${win_theme//"'"}
			Win_theme="${de_theme} (${win_theme})"
		;;
		'Compiz'|'Mutter'*|'GNOME Shell'|'Gala')
			if type -p gsettings >/dev/null 2>&1; then
				Win_theme="$(gsettings get org.gnome.shell.extensions.user-theme name 2>/dev/null)"
				if [[ -z "$Win_theme" ]]; then
					Win_theme="$(gsettings get org.gnome.desktop.wm.preferences theme)"
				fi
				Win_theme=${Win_theme//"'"}
			elif type -p gconftool-2 >/dev/null 2>&1; then
				Win_theme=$(gconftool-2 -g /apps/metacity/general/theme)
			fi
		;;
		'Deepin WM')
			if type -p gsettings >/dev/null 2>&1; then
				Win_theme="$(gsettings get com.deepin.wrap.gnome.desktop.wm.preferences theme)"
				Win_theme=${Win_theme//"'"}
			fi
		;;
		'FluxBox'|'Fluxbox')
			if [ -f "$HOME/.fluxbox/init" ]; then
				Win_theme="$(awk -F"/" '/styleFile/ {print $NF}' "$HOME/.fluxbox/init")"
			fi
		;;
		'KWin'*)
			if [[ -z $KDE_CONFIG_DIR ]]; then
				if type -p kde5-config >/dev/null 2>&1; then
					KDE_CONFIG_DIR=$(kde5-config --localprefix)
				elif type -p kde4-config >/dev/null 2>&1; then
					KDE_CONFIG_DIR=$(kde4-config --localprefix)
				elif type -p kde-config >/dev/null 2>&1; then
					KDE_CONFIG_DIR=$(kde-config --localprefix)
				fi
			fi
			if [[ -n $KDE_CONFIG_DIR ]]; then
				Win_theme="Not_Applicable"
				KDE_CONFIG_DIR=${KDE_CONFIG_DIR%/}
				if [[ -f $KDE_CONFIG_DIR/share/config/kwinrc ]]; then
					Win_theme="$(awk '/PluginLib=kwin3_/{gsub(/PluginLib=kwin3_/,"",$0); print $0; exit}' "$KDE_CONFIG_DIR/share/config/kwinrc")"
					if [[ -z "$Win_theme" ]]; then
						Win_theme="Not_Applicable"
					fi
				fi
				if [[ "$Win_theme" == "Not_Applicable" ]]; then
					if [[ -f $KDE_CONFIG_DIR/share/config/kdebugrc ]]; then
						Win_theme="$(awk '/(decoration)/ {gsub(/\[/,"",$1); print $1; exit}' "$KDE_CONFIG_DIR/share/config/kdebugrc")"
						if [[ -z "$Win_theme" ]]; then
							Win_theme="Not_Applicable"
						fi
					fi
				fi
				if [[ "$Win_theme" == "Not_Applicable" ]]; then
					if [[ -f $KDE_CONFIG_DIR/share/config/kdeglobals ]]; then
						Win_theme="$(awk '/\[General\]/ {flag=1;next} /^$/{flag=0} flag {print}' "$KDE_CONFIG_DIR/share/config/kdeglobals" | grep -oP 'Name=\K.*')"
						if [[ -z "$Win_theme" ]]; then
							Win_theme="Not_Applicable"
						fi
					fi
				fi
				if [[ "$Win_theme" != "Not_Applicable" ]]; then
					if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
						if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
							Win_theme="${Win_theme^}"
						else
							Win_theme="$(tr '[:lower:]' '[:upper:]' <<< "${Win_theme:0:1}")${Win_theme:1}"
						fi
					else
						Win_theme="$(tr '[:lower:]' '[:upper:]' <<< "${Win_theme:0:1}")${Win_theme:1}"
					fi
				fi
			fi
		;;
		'OpenBox'|'Openbox')
			if [ -f "${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/rc.xml" ]; then
				Win_theme="$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' "${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/rc.xml")";
			elif [[ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxde-rc.xml && "${DE}" == "LXDE" ]]; then
				Win_theme="$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' "${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxde-rc.xml")";
			elif [[ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxqt-rc.xml && "${DE}" =~ "LXQt" ]]; then
				Win_theme="$(awk -F'=' '/^theme/ {print $2}' "${HOME}"/.config/lxqt/lxqt.conf)"
			fi
		;;
		'Xfwm4')
			if [ -f "${XDG_CONFIG_HOME:-${HOME}/.config}/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml" ]; then
				Win_theme="$(xfconf-query -c xfwm4 -p /general/theme)"
			fi
		;;
    esac

	verbose "Finding window manager theme...found as '$Win_theme'"
    if [ ! -z "$Win_theme" ]; then
        if [ ! "$Win_theme" == "Not_Found" ] && [ ! "$Win_theme" == "Not_Applicable" ]; then
            printf -v wmTheme "%b %b" "${b_mag}${bld}WM Thmem » \t" "${del}${b_wht}$Win_theme${del}"
        fi
    fi
}

#=== FUNCTION =================================================================
#        Name: get_gtk
# Description: Prints gtk info to main.
#==============================================================================

get_gtk () {
    gtk2Theme="Not_Found"
    gtk3Theme="Not_Found"
    gtkIcons="Not_Found"
    gtkFont="Not_Found"
    case $DE in
        'KDE'*) # Desktop Environment found as "KDE"
            if type - p kde4-config >/dev/null 2>&1; then
                KDE_CONFIG_DIR=$(kde4-config --localprefix)
                if [[ -d ${KDE_CONFIG_DIR} ]]; then
                    if [[ -f "${KDE_CONFIG_DIR}/share/config/kdeglobals" ]]; then
                        KDE_CONFIG_FILE="${KDE_CONFIG_DIR}/share/config/kdeglobals"
                    fi
                fi
            elif type -p kde5-config >/dev/null 2>&1; then
                KDE_CONFIG_DIR=$(kde5-config --localprefix)
                if [[ -d ${KDE_CONFIG_DIR} ]]; then
                    if [[ -f "${KDE_CONFIG_DIR}/share/config/kdeglobals" ]]; then
                        KDE_CONFIG_FILE="${KDE_CONFIG_DIR}/share/config/kdeglobals"
                    fi
                fi
            elif type -p kde-config >/dev/null 2>&1; then
                KDE_CONFIG_DIR=$(kde-config --localprefix)
                if [[ -d ${KDE_CONFIG_DIR} ]]; then
                    if [[ -f "${KDE_CONFIG_DIR}/share/config/kdeglobals" ]]; then
                        KDE_CONFIG_FILE="${KDE_CONFIG_DIR}/share/config/kdeglobals"
                    fi
                fi
            fi

            if [[ -n ${KDE_CONFIG_FILE} ]]; then
                if grep -q 'widgetStyle=' "${KDE_CONFIG_FILE}"; then
                    gtk2Theme=$(awk -F"=" '/widgetStyle=/ {print $2}' "${KDE_CONFIG_FILE}")
                elif grep -q 'colorScheme=' "${KDE_CONFIG_FILE}"; then
                    gtk2Theme=$(awk -F"=" '/colorScheme=/ {print $2}' "${KDE_CONFIG_FILE}")
                fi

                if grep -q 'Theme=' "${KDE_CONFIG_FILE}"; then
                    gtkIcons=$(awk -F"=" '/Theme=/ {print $2}' "${KDE_CONFIG_FILE}")
                fi

                if grep -q 'Font=' "${KDE_CONFIG_FILE}"; then
                    gtkFont=$(awk -F"=" '/font=/ {print $2}' "${KDE_CONFIG_FILE}")
                fi
            fi

            if [[ -f $HOME/.gtkrc-2.0 ]]; then
                gtk2Theme=$(grep '^gtk-theme-name' "$HOME"/.gtkrc-2.0 | awk -F'=' '{print $2}')
                gtk2Theme=${gtk2Theme//\"/}
                gtkIcons=$(grep '^gtk-icon-theme-name' "$HOME"/.gtkrc-2.0 | awk -F'=' '{print $2}')
                gtkIcons=${gtkIcons//\"/}
                gtkFont=$(grep 'font_name' "$HOME"/.gtkrc-2.0 | awk -F'=' '{print $2}')
                gtkFont=${gtkFont//\"/}
            fi

            if [[ -f $HOME/.config/gtk-3.0/settings.ini ]]; then
                gtk3Theme=$(grep '^gtk-theme-name=' "$HOME"/.config/gtk-3.0/settings.ini | awk -F'=' '{print $2}')
            fi
            ;;
        'Cinnamon'*) # Desktop Environment found as "Cinnamon"
            if type -p gsettings >/dev/null 2>&1; then
                gtk3Theme=$(gsettings get org.cinnamon.desktop.interface gtk-theme)
                gtk3Theme=${gtk3Theme//"'"}
                gtk2Theme=${gtk3Theme}

                gtkIcons=$(gsettings get org.cinnamon.desktop.interface icon-theme)
                gtkIcons=${gtkIcons//"'"}
                gtkFont=$(gsettings get org.cinnamon.desktop.interface font-name)
                gtkFont=${gtkFont//"'"}
            fi
            ;;
        'GNOME'*|'Unity'*|'Budgie') # Desktop Environment found as "GNOME"
            if type -p gsettings >/dev/null 2>&1; then
                gtk3Theme=$(gsettings get org.gnome.desktop.interface gtk-theme)
                gtk3Theme=${gtk3Theme//"'"}
                gtk2Theme=${gtk3Theme}
                gtkIcons=$(gsettings get org.gnome.desktop.interface icon-theme)
                gtkIcons=${gtkIcons//"'"}
                gtkFont=$(gsettings get org.gnome.desktop.interface font-name)
                gtkFont=${gtkFont//"'"}
            elif type -p gconftool-2 >/dev/null 2>&1; then
                gtk2Theme=$(gconftool-2 -g /desktop/gnome/interface/gtk_theme)
                gtkIcons=$(gconftool-2 -g /desktop/gnome/interface/icon_theme)
                gtkFont=$(gconftool-2 -g /desktop/gnome/interface/font_name)
            fi
            ;;
        'MATE'*) # MATE desktop environment
            if type -p gsettings >/dev/null 2>&1; then
                gtk3Theme=$(gsettings get org.mate.interface gtk-theme)
                gtk3Theme=${gtk3Theme//"'"}
                gtk2Theme=${gtk3Theme}
                gtkIcons=$(gsettings get org.mate.interface icon-theme)
                gtkIcons=${gtkIcons//"'"}
                gtkFont=$(gsettings get org.mate.interface font-name)
                gtkFont=${gtkFont//"'"}
            fi
            ;;
        'Xfce'*) # Desktop Environment found as "Xfce"
            if [ "$distro" == "BunsenLabs" ] ; then
                gtk2Theme=$(awk -F'"' '/^gtk-theme/ {print $2}' "$HOME"/.gtkrc-2.0)
                gtk3Theme=$(awk -F'=' '/^gtk-theme-name/ {print $2}' "$HOME"/.config/gtk-3.0/settings.ini)
                gtkIcons=$(awk -F'"' '/^gtk-icon-theme/ {print $2}' "$HOME"/.gtkrc-2.0)
                gtkFont=$(awk -F'"' '/^gtk-font-name/ {print $2}' "$HOME"/.gtkrc-2.0)
            else
                if type -p xfconf-query >/dev/null 2>&1; then
                    gtk2Theme=$(xfconf-query -c xsettings -p /Net/ThemeName 2>/dev/null)
                    [ -z "$gtk2Theme" ] && gtk2Theme="Not_Found"
                fi

                if type -p xfconf-query >/dev/null 2>&1; then
                    gtkIcons=$(xfconf-query -c xsettings -p /Net/IconThemeName 2>/dev/null)
                    [ -z "$gtkIcons" ] && gtkIcons="Not_Found"
                fi

                if type -p xfconf-query >/dev/null 2>&1; then
                    gtkFont=$(xfconf-query -c xsettings -p /Gtk/FontName 2>/dev/null)
                    [ -z "$gtkFont" ] && gtkFont="Not Identified"
                fi
            fi
            ;;
        'LXDE'*)
            config_home="${XDG_CONFIG_HOME:-${HOME}/.config}"
            if [ -f "$config_home/lxde/config" ]; then
                lxdeconf="/lxde/config"
            elif [ "$distro" == "Trisquel" ] || [ "$distro" == "FreeBSD" ]; then
                lxdeconf=""
            elif [ -f "$config_home/lxsession/Lubuntu/desktop.conf" ]; then
                lxdeconf="/lxsession/Lubuntu/desktop.conf"
            else
                lxdeconf="/lxsession/LXDE/desktop.conf"
            fi

            if grep -q 'sNet\/ThemeName' "${config_home}${lxdeconf}" 2>/dev/null; then
                gtk2Theme=$(awk -F'=' '/sNet\/ThemeName/ {print $2}' "${config_home}${lxdeconf}")
            fi

            if grep -q 'IconThemeName' "${config_home}${lxdeconf}" 2>/dev/null; then
                gtkIcons=$(awk -F'=' '/sNet\/IconThemeName/ {print $2}' "${config_home}${lxdeconf}")
            fi

            if grep -q 'FontName' "${config_home}${lxdeconf}" 2>/dev/null; then
                gtkFont=$(awk -F'=' '/sGtk\/FontName/ {print $2}' "${config_home}${lxdeconf}")
            fi
            ;;

        *)	# Lightweight or No DE Found
            if [ -f "$HOME/.gtkrc-2.0" ]; then
                if grep -q 'gtk-theme' "$HOME/.gtkrc-2.0"; then
                    gtk2Theme=$(awk -F'"' '/^gtk-theme/ {print $2}' "$HOME/.gtkrc-2.0")
                fi

                if grep -q 'icon-theme' "$HOME/.gtkrc-2.0"; then
                    gtkIcons=$(awk -F'"' '/^gtk-icon-theme/ {print $2}' "$HOME/.gtkrc-2.0")
                fi

                if grep -q 'font' "$HOME/.gtkrc-2.0"; then
                    gtkFont=$(awk -F'"' '/^gtk-font-name/ {print $2}' "$HOME/.gtkrc-2.0")
                fi
            fi
            # $HOME/.gtkrc.mine theme detect only
            if [[ -f "$HOME/.gtkrc.mine" ]]; then
                minegtkrc="$HOME/.gtkrc.mine"
            elif [[ -f "$HOME/.gtkrc-2.0.mine" ]]; then
                minegtkrc="$HOME/.gtkrc-2.0.mine"
            fi
            if [ -f "$minegtkrc" ]; then
                if grep -q '^include' "$minegtkrc"; then
                    gtk2Theme=$(grep '^include.*gtkrc' "$minegtkrc" | awk -F "/" '{ print $5 }')
                fi
                if grep -q '^gtk-icon-theme-name' "$minegtkrc"; then
                    gtkIcons=$(grep '^gtk-icon-theme-name' "$minegtkrc" | awk -F '"' '{print $2}')
                fi
            fi
            # /etc/gtk-2.0/gtkrc compatibility
            if [[ -f /etc/gtk-2.0/gtkrc && ! -f "$HOME/.gtkrc-2.0" && ! -f "$HOME/.gtkrc.mine" && ! -f "$HOME/.gtkrc-2.0.mine" ]]; then
                if grep -q 'gtk-theme-name' /etc/gtk-2.0/gtkrc; then
                    gtk2Theme=$(awk -F'"' '/^gtk-theme-name/ {print $2}' /etc/gtk-2.0/gtkrc)
                fi
                # shellcheck disable=SC2268
                if grep -q 'gtk-fallback-theme-name' /etc/gtk-2.0/gtkrc  && ! [ "x$gtk2Theme" = "x" ]; then
                    gtk2Theme=$(awk -F'"' '/^gtk-fallback-theme-name/ {print $2}' /etc/gtk-2.0/gtkrc)
                fi

                if grep -q 'icon-theme' /etc/gtk-2.0/gtkrc; then
                    gtkIcons=$(awk -F'"' '/^icon-theme/ {print $2}' /etc/gtk-2.0/gtkrc)
                fi
                # shellcheck disable=SC2268
                if  grep -q 'gtk-fallback-icon-theme' /etc/gtk-2.0/gtkrc  && ! [ "x$gtkIcons" = "x" ]; then
                    gtkIcons=$(awk -F'"' '/^gtk-fallback-icon-theme/ {print $2}' /etc/gtk-2.0/gtkrc)
                fi

                if grep -q 'font' /etc/gtk-2.0/gtkrc; then
                    gtkFont=$(awk -F'"' '/^gtk-font-name/ {print $2}' /etc/gtk-2.0/gtkrc)
                fi
            fi
            # EXPERIMENTAL gtk3 Theme detection
            if [[ "$gtk3Theme" = "Not_Found" && -f "$HOME/.config/gtk-3.0/settings.ini" ]]; then
                if grep -q 'gtk-theme-name' "$HOME/.config/gtk-3.0/settings.ini"; then
                    gtk3Theme=$(awk -F'=' '/^gtk-theme-name/ {print $2}' "$HOME/.config/gtk-3.0/settings.ini")
                fi
            fi

             # Proper gtk3 Theme detection
             if type -p gsettings >/dev/null 2>&1; then
                 if [[ -z "$gtk3Theme"  || "$gtk3Theme" = "Not_Found" ]]; then
                     gtk3Theme=$(gsettings get org.gnome.desktop.interface gtk-theme 2>/dev/null)
                     gtk3Theme=${gtk3Theme//"'"}
                 fi
             fi

            # E17 detection
            if [ "$E_ICON_THEME" ]; then
                gtkIcons=${E_ICON_THEME}
                gtk2Theme="Not available."
                gtkFont="Not available."
            fi
            ;;
    esac

    verbose "Finding GTK2 theme...found as '$gtk2Theme'"
    verbose "Finding GTK3 theme...found as '$gtk3Theme'"
    verbose "Finding GTK Icons...found as '$gtkIcons'"
    verbose "Finding GTK Font...found as '$gtkFont'"

    if [ ! -z "$gtk2Theme" ] || [ ! -z "$gtk3Theme" ] || [ ! -z "$gtkIcons" ] || [ ! -z "$gtkFont" ]; then
        if [ "$gtk2Theme" == "$gtk3Theme" ];then
            printf -v gtkTheme "%b %b" "${b_mag}${bld}GTK Theme » \t" "${del}${b_wht}$gtk2Theme (GTK2/3)${del}"
            printf -v gtkIcons "%b %b" "${b_mag}${bld}GTK Icons » \t" "${del}${b_wht}$gtkIcons (GTK2/3)${del}"
            printf -v gtkFonts "%b %b" "${b_mag}${bld}GTK Font » \t" "${del}${b_wht}$gtkFont (GTK2/3)${del}"
        else
            if [ -z "$gtk2Theme" ]; then
                gtk2Theme="$gtk2Theme (GTK2)"
            fi
            if [ -z "$gtk3Theme" ]; then
                gtk3Theme="$gtk3Theme (GTK3)"
            fi
            gtkThemes=$(clean "$gtk2Theme $gtk3Theme")
            printf -v gtkTheme "%b %b" "${b_mag}${bld}GTK Theme » \t" "${del}${b_wht}$gtkThemes${del}"
            printf -v gtkIcons "%b %b" "${b_mag}${bld}GTK Icons » \t" "${del}${b_wht}$gtkIcons${del}"
            printf -v gtkFonts "%b %b" "${b_mag}${bld}GTK Font » \t" "${del}${b_wht}$gtkFont${del}"
        fi
    fi
}

#=== FUNCTION =================================================================
#        Name: get_qt
# Description: Prints qt info to main.
#==============================================================================

get_qt() {
    # Handle Qt5ct platform theme
    get_qt5ct_output() {
        qt5ct=$1
        if [[ -f "${XDG_CONFIG_HOME}/qt5ct/qt5ct.conf" ]]; then
            qt5ct="$(grep "^${qt5ct}" "${XDG_CONFIG_HOME}/qt5ct/qt5ct.conf")"
            qt5ct="${qt5ct/*=}"
            echo "$qt5ct"
        else
            echo ""
        fi

    }

    # Handle Qt6ct platform theme
    get_qt6ct_output() {
        qt6ct=$1
        if [[ -f "${XDG_CONFIG_HOME}/qt6ct/qt6ct.conf" ]]; then
            qt6ct="$(grep "^${qt6ct}" "${XDG_CONFIG_HOME}/qt6ct/qt6ct.conf")"
            qt6ct="${qt6ct/*=}"
            echo "$qt6ct"
        else
            echo ""
        fi

    }

    get_qt5Theme() {
        qt5Theme=$(get_qt5ct_output "style=")
        if [ ! -z "$qt6Theme" ]; then
            # Handle Qt theme engines that load external themes
            case "$qt5Theme" in
                'Kvantum')
                    if kvantum_theme="$(grep '^theme' "${XDG_CONFIG_HOME}/Kvantum/kvantum.kvconfig")"; then
                        qt5Theme="$kvantum_theme"
                        qt5Theme="${qt5Theme/*=}"
                    fi
                    ;;
                *'gtk2')
                    qt5Theme="$gtk2_theme"
                    ;;
            esac

            custom=$(get_qt5ct_output "custom_palette=")
            if [[ "${custom}" == "true" ]]; then
                qt5Theme=$(get_qt5ct_output "color_scheme_path=")
                qt5Theme=$(basename "${qt5Theme}")
                IFS='.' read -r name ext <<< "$qt5Theme"
                qt5Theme="${name}"
            fi

            qt5Theme="$(trim "$qt5Theme")"
        fi
    }

    get_qt5Icons() {
        qt5Icons=$(get_qt5ct_output "icon_theme=")
        if [ ! -z "$qt6Theme" ]; then
            qt5Icons="$(trim "$qt5Icons")"
        fi
    }

    get_qt5Font() {
        qt5Font=$(get_qt5ct_output "general=")
        if [ ! -z "$qt6Theme" ]; then
            # Trim quotes and parentheses
            qt5Font="${qt5Font#'"'}"
            qt5Font="${qt5Font%'"'}"
            qt5Font="${qt5Font#@Variant(}"
            qt5Font="${qt5Font%)}"

            # Read font name
            qt5ct_font_name="${qt5Font#*@}"
            qt5ct_font_name="${qt5ct_font_name%%@*}"
            # Interpret backslashes
            qt5ct_font_name=$(printf "%b" "$qt5ct_font_name" | tr -d '\0')
            qt5ct_font_name="${qt5ct_font_name#','}"
            qt5ct_font_name="${qt5ct_font_name//[[:cntrl:]]}" # trim control characters

            # Get font size
            # Tread carefully, Qt sometimes uses @ in binary data
            local pre_size="${qt5Font#*@}"
            local pre_size="${pre_size#*@}"
            # Need to declare array and manually handle the second byte
            # (workaround for `od` without --endian)
            IFS=' ' local raw_size=( $(printf "%b" "${pre_size}" | od -An -tu1 -N2) )
            # Split the upper 4 bits (exponent) the lower 12.
            local lowers=$(( ((raw_size[0]%16)<<8) + (raw_size[1]) ))
            local upper4=$((raw_size[0]>>4 ))
            qt5ct_font_size=$(( (2**(upper4+1)) + (lowers>>(11-upper4)) ))

            qt5Font="$qt5ct_font_name $qt5ct_font_size"
            qt5Font="$(trim "$qt5Font")"
        fi
    }

    get_qt6Theme() {
        qt6Theme=$(get_qt6ct_output "style=")
        if [ ! -z "$qt6Theme" ]; then
            # Handle Qt theme engines that load external themes
            case "$qt6Theme" in
                'Kvantum')
                    if kvantum_theme="$(grep '^theme' "${XDG_CONFIG_HOME}/Kvantum/kvantum.kvconfig")"; then
                        qt6Theme="$kvantum_theme"
                        qt6Theme="${qt6Theme/*=}"
                    fi
                    ;;
                *'gtk2')
                    qt6Theme="$gtk2_theme"
                    ;;
            esac

            custom=$(get_qt6ct_output "custom_palette=")
            if [[ "${custom}" == "true" ]]; then
                qt6Theme=$(get_qt6ct_output "color_scheme_path=")
                qt6Theme=$(basename "${qt6Theme}")
                IFS='.' read -r name ext <<< "$qt6Theme"
                qt6Theme="${name}"
            fi

            qt6Theme="$(trim "$qt6Theme")"
        fi
    }

    get_qt6Icons() {
        qt6Icons=$(get_qt6ct_output "icon_theme=")
        if [ ! -z "$qt6Icons" ]; then
            qt6Icons="$(trim "$qt6Icons")"
        fi
    }

    get_qt6Font() {
        qt6Font=$(get_qt6ct_output "general=")
        if [ ! -z "$qt6Font" ]; then

            # Trim quotes and parentheses
            qt6Font="${qt6Font#'"'}"
            qt6Font="${qt6Font%'"'}"
            qt6Font="${qt6Font#@Variant(}"
            qt6Font="${qt6Font%)}"

            # Read font name
            qt6ct_font_name="${qt6Font#*@}"
            qt6ct_font_name="${qt6ct_font_name%%@*}"
            # Interpret backslashes
            qt6ct_font_name=$(printf "%b" "$qt6ct_font_name" | tr -d '\0')
            qt6ct_font_name="${qt6ct_font_name#','}"
            qt6ct_font_name="${qt6ct_font_name//[[:cntrl:]]}" # trim control characters

            # Get font size
            # Tread carefully, Qt sometimes uses @ in binary data
            local pre_size="${qt6Font#*@}"
            local pre_size="${pre_size#*@}"
            # Need to declare array and manually handle the second byte
            # (workaround for `od` without --endian)
            IFS=' ' local raw_size=( $(printf "%b" "${pre_size}" | od -An -tu1 -N2) )
            # Split the upper 4 bits (exponent) the lower 12.
            local lowers=$(( ((raw_size[0]%16)<<8) + (raw_size[1]) ))
            local upper4=$((raw_size[0]>>4 ))
            qt6ct_font_size=$(( (2**(upper4+1)) + (lowers>>(11-upper4)) ))

            qt6Font="$qt6ct_font_name $qt6ct_font_size"
            qt6Font="$(trim "$qt6Font")"
        fi
    }

    get_qt5Theme
    get_qt6Theme
    verbose "Finding QT5 theme...found as '$qt5Theme'"
    verbose "Finding QT6 theme...found as '$qt6Theme'"
    if [ ! -z "$qt5Theme" ] || [ ! -z "$qt6Theme" ]; then
        if [ "$qt5Theme" == "$qt6Theme" ]; then
            printf -v qtTheme "%b %b" "${b_mag}${bld}QT Theme » \t" "${del}${b_wht}$qt5Theme (QT5/QT6)${del}"
        else
            if [ -z "$qt5Theme" ]; then
                qt5Theme="$qt5Theme (QT5)"
            fi
            if [ -z "$qt6Theme" ]; then
                qt6Theme="$qt6Theme (QT6)"
            fi
            qtThemes=$(clean "$qt5Theme $qt6Theme")
            printf -v qtTheme "%b %b" "${b_mag}${bld}QT Theme » \t" "${del}${b_wht}$qtThemes${del}"
        fi
    fi

    get_qt5Icons
    get_qt6Icons
    verbose "Finding QT5 Icons...found as '$qt5Icons'"
    verbose "Finding QT6 Icons...found as '$qt6Icons'"
    if [ ! -z "$qt5Icons" ] || [ ! -z "$qt6Icons" ]; then
        if [ "$qt5Icons" == "$qt6Icons" ]; then
            printf -v qtIcons "%b %b" "${b_mag}${bld}QT Icons » \t" "${del}${b_wht}$qt5Icons (QT5/QT6)${del}"
        else
            if [ -z "$qt5Icons" ]; then
                qt5Icons="$qt5Icons (QT5)"
            fi
            if [ -z "$qt6Icons" ]; then
                qt6Icons="$qt6Icons (QT6)"
            fi
            qtIcons=$(clean "$qt5Icons $qt6Icons")
            printf -v qtIcons "%b %b" "${b_mag}${bld}QT Icons » \t" "${del}${b_wht}$qtIcons${del}"
        fi
    fi

    get_qt5Font
    get_qt6Font
    verbose "Finding QT5 Font...found as '$qt5Font'"
    verbose "Finding QT6 Font...found as '$qt6Font'"
    if [ ! -z "$qt5Font" ] || [ ! -z "$qt6Font" ]; then
        if [ "$qt5Font" == "$qt6Font" ]; then
            printf -v qtFonts "%b %b" "${b_mag}${bld}QT Font » \t" "${del}${b_wht}$qt5Font (QT5/QT6)${del}"
        else
            if [ -z "$qt5Font" ]; then
                qt5Font="$qt5Font (QT5)"
            fi
            if [ -z "$qt6Font" ]; then
                qt6Font="$qt6Font (QT6)"
            fi
            qtFonts=$(clean "$qt5Font $qt6Font")
            printf -v qtFonts "%b %b" "${b_mag}${bld}QT Font » \t" "${del}${b_wht}$qtFonts${del}"
        fi
    fi

}

#=== FUNCTION =================================================================
#        Name: get_end
# Description: Prints end info to main.
#==============================================================================

get_end() {
    printf -v end "%b" "${b_red}╚═══════════════════════════════════════════════════════╝${del}"
}

#=== FUNCTION =================================================================
#        Name: get_blank
# Description: Prints blank info to main.
#==============================================================================

get_blank() {
    printf -v blank "%b" "\t"
}

#=== FUNCTION =================================================================
#        Name: get_colors
# Description: Prints color1 and color2 info to main.
#==============================================================================

get_colors() {
    color1="${blk} ⬤ ${red} ⬤ ${grn} ⬤ ${yel} ⬤ ${blu} ⬤ ${mag} ⬤ ${cyn} ⬤ ${wht} ⬤ ${del}"
    printf -v color1 "%b" "$color1"
    color2="${b_blk} ⬤ ${b_red} ⬤ ${b_grn} ⬤ ${b_yel} ⬤ ${b_blu} ⬤ ${b_mag} ⬤ ${b_cyn} ⬤ ${b_wht} ⬤ ${del}"
    printf -v color2 "%b" "$color2"
}

#=== FUNCTION =================================================================
#        Name: main
# Description: Prints system information.
#==============================================================================

main() {
    # Load default config.
    eval "$config"

    get_user_config

    get_ascii
    get_title
    get_sep
    get_uptime
    get_hwinfo
    get_host
    get_cpu
    get_gpu
    if [ "$(clean "${gpu##* }")" = 'Not_Found' ] ; then
	    get_intel_gpu
    fi
    get_memory
    get_res
    get_disk
    get_pinfo
    get_keyboard
    get_mouse
    get_monitor
    get_audio
    get_swinfo
    get_distro
    get_init
    get_kernel
    get_pkgs
    get_shell
    get_term
    get_de
    get_wm
    get_wmtheme
    get_gtk
    get_qt
    get_end
    get_blank
    get_colors

    count=0
    while IFS= read -r Line; do
        if [ -n "${!display[$count]}" ]; then
            printf "%b\t%b\n" "$Line" "  ${!display[$count]}"
        fi
        count=$(( count + 1 ))
    done <<< "$ascii_art"

    userbday_content="$(< "$log_dir"/userbday.log)"
    [ "$userbday_content" = "00/00" ] && printf "Please input your birthday (dd/mm) for better experience. Example 12 June: %b --birthday 12/06" "$SCRIPTNAME"
}

while true; do
    case $1 in
        -h|--help|-\?)
            usage
            exit 0 ;;
        -v|--version)
            version
            exit 0 ;;
        -b|--birthday)
            userbday="$2"
            [ ${#userbday} -eq 5 ] && echo "$userbday" > "$log_dir"/userbday.log
            main "$@"
            exit 0 ;;
        *)
            main "$@"
            exit 0 ;;
    esac
    shift
done
